#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('wargame-back:server');
let http = require('http');
let mongoSeed = require('../seed.js')
const connectToMongoDB = require('../connect');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

// Conectar a MongoDB al iniciar la aplicación
(async () => {
  try {
    const client = await connectToMongoDB();
    // Haz lo que necesites con la conexión, por ejemplo, asignarla a una variable global
    app.set('mongoClient', client);
    console.log("Aplicación Express conectada a MongoDB");

    // Llama a la función de semilla después de conectar a la base de datos
    //await mongoSeed()
    //console.log("Semilla ejecutada exitosamente");

  } catch (error) {
    console.error("Error al iniciar la aplicación:", error);
    process.exit(1); // Termina el proceso si no se puede conectar a MongoDB
  }
})();


function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("\nServidor escuchando en el puerto", port); // Asegura que el mensaje se muestre
}
